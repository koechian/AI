# -*- coding: utf-8 -*-
"""BFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rIDbi7r2n8GroEBBzB5Iaf4g9mggWBlc
"""

#BFS traversal of a directed, weighted graph

# 136745 Ryan Ombatti
# 131860 Kuria Timothy
# 135803 Muthiore Maria
#135357 Ian Koech 
#134703 Rita Maringa
#134701 Sean Kinuthia


from queue import Queue
import networkx as nx
import matplotlib.pyplot as plt

directed_weighted_graph={
    'A': {'B': 3, 'D':2},
    'B': {'C': 1},
    'C': {'D': 3, 'E':3},
    'D': {'E': 4},
    'E': {}
}
G= nx.Graph()
for node in directed_weighted_graph:
  for neighbour in directed_weighted_graph[node]:
    G.add_edge(node,neighbour, weight=directed_weighted_graph[node][neighbour])

pos = nx.spring_layout(G)
labels=nx.get_edge_attributes(G, 'weight')  
nx.draw(G, pos, arrows=True, with_labels=True)
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
plt.show()

visited={}
queue=Queue()

for node in directed_weighted_graph.keys():
  visited[node]=False

start_node='A'
visited[start_node]=True
queue.put(start_node) 

while not queue.empty():
  p=queue.get() #pop the first element in the queue
  print(p, end=" ")

  for vertex in directed_weighted_graph[p]:  #get the neighbours of the current node
    if not visited[vertex]:
      visited[vertex]=True
      queue.put(vertex)